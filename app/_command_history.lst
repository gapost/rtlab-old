dev.newDAQmxTask("ai")
dev.ai.online=true
dev.ai.addAnalogInputChannel("Dev1/ai0")
quit()
dev.newDAQmxTask("ai")
dev.ai.addAnalogInputChannel("Dev1/ai0")
dev.ai.addAnalogInputChannel("Dev1\ai1")
dev.ai.online
dev.ai.online=1
dev.ai.read()
exec("script/testdaqmx.qs")
kill(find(*))
find(*)
find("*")
kill(find("*"))
exec("script/testdaqmx.qs")
dev.ai.read()
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
with(dev.ai) { read(); print("ch1 = " + ch1.value()); print("ch2 = " + ch2.value()); }
exec("script/testdaqmx.qs")
dev.newDAQmxTask("ctr1")
dev.ctr1.addCountEdgesChannel("Dev2/ctr0")
dev.ctr1.addCountEdgesChannel("Dev2/ctr1")
dev.ctr1.start()
dev.ctr1.on()
kill(dev.ctr1)
dev.newDAQmxTask("ctr1")
dev.ctr1.addCountEdgesChannel("Dev2/ctr0")
dev.ctr1.on()
dev.ctr1.read()
exec("script/testdaqmx.qs")
dir
ls
exec("script/testDaqmx.qs")
dev.ai.ch1.show()
dev.ai.ch2.show()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
dev.ai.read()
kill(dev.ctr1)
kill(dev.ai)
dev.newInterface("gpib","GPIB")
dev.gpib.findListeners()
dev.newDevice("nvm",dev.gpib,7)
dev.nvm.on()
dev.gpib.open()
dev.gpib.clear()
dev.nvm.on()
dev.nvm.write("*IDN?")
dev.nvm.read()
dev.newDevice("nvm",dev.gpib,12)
dev.newDevice("dmm",dev.gpib,12)
dev.dmm.on()
dev.dmm.write("*idn?")
dev.dmm.read()
kill(find("*"))
dev.newInterface("gpib","GPIB")
kill(find("*"))
exec("script/testmodbus.qs")
exec("script/testmodbus.qs")
dev.newInterface("mdbus","MODBUS-TCP")
dev.mdbus.host
dev.mdbus.host = "100.100.100.5"
dev.mdbus.open()
dev.newInterface("mdb","MODBUS-TCP")
a = dev.mdb
dev.newInterface("mdb","MODBUS-TCP")
dev.newInterface("mdb","MODBUS-TCP")
a = dev.mdb
a.isOpen
a.isOpen()
a.isOpen
a.toString()
a.timeout
dev.newDAQmxTask("ctr")
dev.ctr.armed
beep()
find("*")
s1.listFunctions()
kill(dev)
kill(find("*"))
kill(find("*"))
kill(dev)
kill(s1)
s1
exec("script/testmodbus.qs")
find("*")
kill(find("*"))
pwd
pwd()
dir()
dir
dir("*.cpp")
dir("*.h")
dir(["*.h","*.cpp"])
saveWindowState("winst.dat")
saveWindowState("window.state.1")
saveWindowState("window.state.2")
restoreWindowState("window.state.1")
restoreWindowState("window.state.2")
saveWindowState("window.state.3")
restoreWindowState("window.state.2")
restoreWindowState("window.state.1")
restoreWindowState("window.state.1")
restoreWindowState("window.state.1")
saveWindowState("window.state.0")
restoreWindowState("window.state.0")
restoreWindowState("window.state.0")
restoreWindowState("window.state.0")
restoreWindowState("window.state.0")
saveWindowState("window.state.0")
saveWindowState("window.state.1")
saveWindowState("window.state.2")
restoreWindowState("window.state.0")
restoreWindowState("window.state.1")
restoreWindowState("window.state.2")
restoreWindowState("window.state.2")
restoreWindowState("window.state.1")
saveWindowState("window.state.0")
saveWindowState("window.state.1")
restoreWindowState("window.state.0")
restoreWindowState("window.state.1")
pwd()
s1
s1.saveWindowState("wstate.0")
s1.saveWindowState("wstate.1")
restoreWindowState("wstate.1")
find("*")
find("s?")
quit()
dir()
dir("*.h")
dir("*.cpp")
exec("script/testmodbus.qs")
kill(find("*"))
exec("script/testmodbus.qs")
exec("script/test6221.qs")
read()
read
dev.ai.read()
dev.ctr.read()
dev.ctr.read()
dev.dio.read()
dev.dio.write(1)
dev.dio.write(0)
kill(dev.ai)
dev.ai.off()
kill(dev.ai)
kill([dev.ai])
kill([dev.ctr])
kill([dev.dio])
kill([s1])
find("*")
kill(find("*"))
exec("script/testdaqmx.qs")
exec("script/main.qs")
